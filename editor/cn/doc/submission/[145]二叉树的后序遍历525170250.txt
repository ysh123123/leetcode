/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// struct TreeNode {
//     int val;
//     TreeNode *left;
//     TreeNode *right;
//     TreeNode() : val(0), left(nullptr), right(nullptr) {}
//     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
//     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
// };
class Solution {
public:
    void Traversal(TreeNode*node,std::vector<int>&result)
    {
        if(node==nullptr)return;
        Traversal(node->left,result);
        Traversal(node->right,result);
        result.emplace_back(node->val);
    }
    std::vector<int> postorderTraversal(TreeNode* root) {
        std::vector<int> result;
        Traversal(root,result);
        return result;
    }
};

//runtime:0 ms
//memory:9.7 MB
